import bpy
import os

# Local imports
from .color_palette import ColorPaletteProperty, AddColorOperator, RemoveColorOperator, ReorderColorOperator, CopyColorOperator, EditPaletteOperator, SavePaletteOperator, LoadPaletteOperator, PRODUCTIONKIT_PT_colorPalette
from .project_version import PRODUCTIONKIT_OT_SaveProjectVersion, TOPBAR_MT_file_save_version
from .update_images import Production_Kit_Update_Images, Production_Kit_Switch_Extension_Inputs, Production_Kit_Replace_Extensions, PRODUCTIONKIT_PT_update_images_ui, production_kit_update_images_menu_item
from .viewport_shading import PRODUCTIONKIT_OT_set_viewport_shading, production_kit_viewport_shading_menu_items



###########################################################################
# Global user preferences and UI rendering class

class ProductionKitPreferences(bpy.types.AddonPreferences):
	bl_idname = __package__
	
	########## Project Version ##########
	
	version_type: bpy.props.EnumProperty(
		name='Type',
		description='Version file naming convention',
		items=[
			('NUM', 'Number', 'Save versions using autogenerated serial numbers'),
			('TIME', 'Timestamp', 'Save versions with the current date and time'),
			('ALPHANUM', 'Alphanumeric', 'Save versions with an incrementing major version number and minor alphabet character')
			],
		default='NUM')
	version_path: bpy.props.StringProperty(
		name="Path",
		description="Leave a single forward slash to auto generate folders alongside project files",
		default="//_Archive",
		maxlen=4096,
		subtype="DIR_PATH")
	version_separator: bpy.props.StringProperty(
		name="Separator",
		description="separator between the project name and the version number",
		default="-",
		maxlen=16)
	version_length: bpy.props.IntProperty(
		name="Characters",
		description="Total character count, padded with leading zeroes",
		default=4,
		soft_min=1,
		soft_max=8,
		min=1,
		max=8)
	version_compress: bpy.props.BoolProperty(
		name='Compression',
		description='Compresses versioned files, or for Alphanumeric, compresses the main project when saving',
		default=True)
	version_keepbackup: bpy.props.BoolProperty(
		name='Keep .blend1',
		description='Keeps the .blend1 backup file alongside the archived project',
		default=False)
	version_popup: bpy.props.BoolProperty(
		name='Success Popup',
		description='Confirms successful version saving with a popup panel',
		default=False)
	version_auto: bpy.props.BoolProperty(
		name='Detect Alphanumeric',
		description='Recognises if the current project file already has an alphanumeric serial number, and uses that versioning type automatically',
		default=True)
	
	
	
	########## Update Images ##########
	
	# Global variables
	enable_file_reload: bpy.props.BoolProperty(
		name="File Reload",
		description="Reloads all image files",
		default=True)
	enable_file_format: bpy.props.BoolProperty(
		name="File Format",
		description="Formats all image files using the specified filters",
		default=False)
	
	# Filter sets (this should really use a dynamic list, not static presets)
	filter1_name: bpy.props.StringProperty(
		name="Filter Name",
		description="String to match in the image name",
		default="-color",
		maxlen=4096)
	filter1_colorspace: bpy.props.EnumProperty(
		name='Color Space',
		description='Set matching files to this color space',
		items=[
			('Filmic Log', 'Filmic Log', 'Filmic Log color space'),
			('Linear', 'Linear', 'Linear color space'),
			('Linear ACES', 'Linear ACES', 'Linear ACES color space'),
			('Linear ACEScg', 'Linear ACEScg', 'Linear ACEScg color space'),
			('Non-Color', 'Non-Color', 'Non-Color color space'),
			('Raw', 'Raw', 'Raw color space'),
			('sRGB', 'sRGB', 'sRGB color space'),
			('XYZ', 'XYZ', 'XYZ color space')
			],
		default='sRGB')
	filter1_alphamode: bpy.props.EnumProperty(
		name='Alpha Mode',
		description='Set matching files to this alpha mode',
		items=[
			('STRAIGHT', 'Straight', 'RGB channels are stored without association, but the alpha still operates as a mask'),
			('PREMUL', 'Premultiplied', 'RGB channels have been multiplied by the alpha'),
			('CHANNEL_PACKED', 'Channel Packed', 'Treat alpha as a fourth color channel without masking'),
			('NONE', 'None', 'Ignore alpha channel')
			],
		default='STRAIGHT')

	filter2_name: bpy.props.StringProperty(
		name="Filter Name",
		description="String to match in the image name",
		default="-orm",
		maxlen=4096)
	filter2_colorspace: bpy.props.EnumProperty(
		name='Color Space',
		description='Set matching files to this color space',
		items=[
			('Filmic Log', 'Filmic Log', 'Filmic Log color space'),
			('Linear', 'Linear', 'Linear color space'),
			('Linear ACES', 'Linear ACES', 'Linear ACES color space'),
			('Linear ACEScg', 'Linear ACEScg', 'Linear ACEScg color space'),
			('Non-Color', 'Non-Color', 'Non-Color color space (typically used for normal maps)'),
			('Raw', 'Raw', 'Raw color space'),
			('sRGB', 'sRGB', 'sRGB color space'),
			('XYZ', 'XYZ', 'XYZ color space')
			],
		default='Non-Color')
	filter2_alphamode: bpy.props.EnumProperty(
		name='Alpha Mode',
		description='Set matching files to this alpha mode',
		items=[
			('STRAIGHT', 'Straight', 'RGB channels are stored without association, but the alpha channel still operates as a mask'),
			('PREMUL', 'Premultiplied', 'RGB channels have been multiplied by the alpha channel as an embedded mask'),
			('CHANNEL_PACKED', 'Channel Packed', 'Treat the alpha as a fourth color channel without masking'),
			('NONE', 'None', 'Ignore alpha channel')
			],
		default='CHANNEL_PACKED')

	filter3_name: bpy.props.StringProperty(
		name="Filter Name",
		description="String to match in the image name",
		default="-normal",
		maxlen=4096)
	filter3_colorspace: bpy.props.EnumProperty(
		name='Color Space',
		description='Set matching files to this color space',
		items=[
			('Filmic Log', 'Filmic Log', 'Filmic Log color space'),
			('Linear', 'Linear', 'Linear color space'),
			('Linear ACES', 'Linear ACES', 'Linear ACES color space'),
			('Linear ACEScg', 'Linear ACEScg', 'Linear ACEScg color space'),
			('Non-Color', 'Non-Color', 'Non-Color color space (typically used for normal maps)'),
			('Raw', 'Raw', 'Raw color space'),
			('sRGB', 'sRGB', 'sRGB color space'),
			('XYZ', 'XYZ', 'XYZ color space')
			],
		default='Non-Color')
	filter3_alphamode: bpy.props.EnumProperty(
		name='Alpha Mode',
		description='Set matching files to this alpha mode',
		items=[
			('STRAIGHT', 'Straight', 'RGB channels are stored without association, but the alpha channel still operates as a mask'),
			('PREMUL', 'Premultiplied', 'RGB channels have been multiplied by the alpha channel as an embedded mask'),
			('CHANNEL_PACKED', 'Channel Packed', 'Treat the alpha as a fourth color channel without masking'),
			('NONE', 'None', 'Ignore alpha channel')
			],
		default='CHANNEL_PACKED')

	filter4_name: bpy.props.StringProperty(
		name="Filter Name",
		description="String to match in the image name",
		default="",
		maxlen=4096)
	filter4_colorspace: bpy.props.EnumProperty(
		name='Color Space',
		description='Set matching files to this color space',
		items=[
			('Filmic Log', 'Filmic Log', 'Filmic Log color space'),
			('Linear', 'Linear', 'Linear color space'),
			('Linear ACES', 'Linear ACES', 'Linear ACES color space'),
			('Linear ACEScg', 'Linear ACEScg', 'Linear ACEScg color space'),
			('Non-Color', 'Non-Color', 'Non-Color color space (typically used for normal maps)'),
			('Raw', 'Raw', 'Raw color space'),
			('sRGB', 'sRGB', 'sRGB color space'),
			('XYZ', 'XYZ', 'XYZ color space')
			],
		default='sRGB')
	filter4_alphamode: bpy.props.EnumProperty(
		name='Alpha Mode',
		description='Set matching files to this alpha mode',
		items=[
			('STRAIGHT', 'Straight', 'RGB channels are stored without association, but the alpha channel still operates as a mask'),
			('PREMUL', 'Premultiplied', 'RGB channels have been multiplied by the alpha channel as an embedded mask'),
			('CHANNEL_PACKED', 'Channel Packed', 'Treat the alpha as a fourth color channel without masking'),
			('NONE', 'None', 'Ignore alpha channel')
			],
		default='STRAIGHT')

	filter5_name: bpy.props.StringProperty(
		name="Filter Name",
		description="String to match in the image name",
		default="",
		maxlen=4096)
	filter5_colorspace: bpy.props.EnumProperty(
		name='Color Space',
		description='Set matching files to this color space',
		items=[
			('Filmic Log', 'Filmic Log', 'Filmic Log color space'),
			('Linear', 'Linear', 'Linear color space'),
			('Linear ACES', 'Linear ACES', 'Linear ACES color space'),
			('Linear ACEScg', 'Linear ACEScg', 'Linear ACEScg color space'),
			('Non-Color', 'Non-Color', 'Non-Color color space (typically used for normal maps)'),
			('Raw', 'Raw', 'Raw color space'),
			('sRGB', 'sRGB', 'sRGB color space'),
			('XYZ', 'XYZ', 'XYZ color space')
			],
		default='sRGB')
	filter5_alphamode: bpy.props.EnumProperty(
		name='Alpha Mode',
		description='Set matching files to this alpha mode',
		items=[
			('STRAIGHT', 'Straight', 'RGB channels are stored without association, but the alpha channel still operates as a mask'),
			('PREMUL', 'Premultiplied', 'RGB channels have been multiplied by the alpha channel as an embedded mask'),
			('CHANNEL_PACKED', 'Channel Packed', 'Treat the alpha as a fourth color channel without masking'),
			('NONE', 'None', 'Ignore alpha channel')
			],
		default='STRAIGHT')
	
	
	
	########## Colour Palette ##########
	
	def update_palette_category(self, context):
		category = bpy.context.preferences.addons[__package__].preferences.palette_category
		try:
			bpy.utils.unregister_class(PRODUCTIONKIT_PT_colorPalette)
		except RuntimeError:
			pass
		if len(category) > 0:
			PRODUCTIONKIT_PT_colorPalette.bl_category = category
			bpy.utils.register_class(PRODUCTIONKIT_PT_colorPalette)
	
	palette_category: bpy.props.StringProperty(
		name="Palette Panel",
		description="Choose a category for the panel to be placed in",
		default="Launch",
		update=update_palette_category)
		# Consider adding search_options=(list of currently available tabs) for easier operation
	palette_file_location: bpy.props.StringProperty(
		name = "Palette Location",
		description = "Location of the palette library saved alongside the project file (should always be a relative path)",
		default = "//",
		maxlen = 4096,
		subtype = "DIR_PATH")
	palette_file_name: bpy.props.StringProperty(
		name = "Palette Name",
		description = "Name of the plain text library file",
		default = "ProductionKit-Palette.txt",
		maxlen = 1024)
	
	
	
	############################## Preferences UI ##############################
	
	# User Interface
	def draw(self, context):
		settings = context.scene.production_kit_settings
		
		layout = self.layout
		
		########## Project Version ##########
		
		layout.label(text="Save Project Version", icon="FILE") # FILE CURRENT_FILE FILE_BLEND DUPLICATE
		
		# Alignment Column
		col = layout.column(align=True)
		
		# Create Info Strings
		if self.version_type == 'ALPHANUM':
			info = 'Saves project with new name, archives previous file'
			info_file = 'ProjectName' + self.version_separator
			version_length = format(self.version_length - 1, '02')
			info_file += format(1, version_length) + "b.blend,    " + self.version_path + '...' + format(1, version_length) + 'a.blend'
		else:
			info = 'Copies project to archive with '
			info_file = os.path.join(self.version_path, 'ProjectName') + self.version_separator
			if self.version_type == 'TIME':
				info += 'date and time'
				info_file += 'YYYY-MM-DD-HH-MM-SS'
			else:
				info += 'automatic serial number'
				version_length = format(self.version_length, '02')
				info_file += format(1, version_length)
			info_file += '.blend'
			
		# Display Info
		box = col.box()
		col2 = box.column(align=True)
		col2.label(text=info)
		col2.label(text=info_file)
		
		# Versioning Type
		row = col.row(align=True)
		row.prop(self, 'version_type', expand=True)
		
		# Path Location
		col.prop(self, "version_path", text='')
		
		# Naming Options
		row = col.row(align=True)
		row.prop(self, "version_separator", text='')
		if self.version_type != 'TIME':
			row.prop(self, "version_length")
		
		# Settings Checkboxes
		grid0 = layout.grid_flow(row_major=True, columns=2, even_columns=True, even_rows=False, align=False)
		grid0.prop(self, "version_compress")
		grid0.prop(self, "version_popup")
		grid0.prop(self, "version_auto")
		if self.version_type == 'ALPHANUM' or self.version_auto:
			grid0.prop(self, "version_keepbackup")
		
		
		
		########## Update Images ##########
		
		layout.separator(factor = 2.0)
		layout.label(text="Update Image Files", icon="IMAGE") # IMAGE IMAGE_DATA FILE_IMAGE NODE_TEXTURE
		
		grid1 = layout.grid_flow(row_major=True, columns=2, even_columns=True, even_rows=False, align=False)
		grid1.prop(self, "enable_file_reload")
		grid1.prop(self, "enable_file_format")
		
		grid = layout.grid_flow(row_major=True, columns=2, even_columns=False, even_rows=False, align=False)
		if not self.enable_file_format:
			grid.enabled = False
			
		grid.prop(self, "filter1_name", text='')
		row1 = grid.row(align=False)
		if not self.filter1_name:
			row1.enabled = False
		row1.prop(self, "filter1_colorspace", text='')
		row1.prop(self, "filter1_alphamode", text='')
		
		grid.prop(self, "filter2_name", text='')
		row2 = grid.row(align=False)
		if not self.filter2_name:
			row2.enabled = False
		row2.prop(self, "filter2_colorspace", text='')
		row2.prop(self, "filter2_alphamode", text='')
		
		grid.prop(self, "filter3_name", text='')
		row3 = grid.row(align=False)
		if not self.filter3_name:
			row3.enabled = False
		row3.prop(self, "filter3_colorspace", text='')
		row3.prop(self, "filter3_alphamode", text='')
		
		grid.prop(self, "filter4_name", text='')
		row4 = grid.row(align=False)
		if not self.filter4_name:
			row4.enabled = False
		row4.prop(self, "filter4_colorspace", text='')
		row4.prop(self, "filter4_alphamode", text='')
		
		grid.prop(self, "filter5_name", text='')
		row5 = grid.row(align=False)
		if not self.filter5_name:
			row5.enabled = False
		row5.prop(self, "filter5_colorspace", text='')
		row5.prop(self, "filter5_alphamode", text='')
		
		
		
		########## Colour Palette ##########
		
		layout.separator(factor = 2.0)
		layout.label(text="Color Palette Panel", icon="COLOR") # COLOR RESTRICT_COLOR_ON RESTRICT_COLOR_OFF 
		
		grid2 = layout.grid_flow(row_major=True, columns=3, even_columns=True, even_rows=False, align=False)
		grid2.prop(self, "palette_file_location", text='')
		grid2.prop(self, "palette_file_name", text='')
		grid2.prop(self, "palette_category", text='')



###########################################################################
# Local project settings

class ProductionKitSettings(bpy.types.PropertyGroup):
	
	########## Update Images ##########
	
	file_extension_source: bpy.props.StringProperty(
		name="Source File Extension",
		description="Define the file extension you want to replace",
		default=".png",
		maxlen=4096)
	file_extension_target: bpy.props.StringProperty(
		name="Target File Extension",
		description="Replace all source file extensions with this file extension",
		default=".jpg",
		maxlen=4096)
	
	########## Colour Palette ##########
	
	palette_edit: bpy.props.BoolProperty(
		name = "Editing Status",
		description = "Editing status of the palette",
		default = False)





###########################################################################
# Addon registration functions
# •Define classes being registered
# •Define keymap array
# •Registration function
# •Unregistration function

classes = (ProductionKitPreferences, ProductionKitSettings,
	ColorPaletteProperty, AddColorOperator, RemoveColorOperator, ReorderColorOperator, CopyColorOperator, EditPaletteOperator, SavePaletteOperator, LoadPaletteOperator, PRODUCTIONKIT_PT_colorPalette,
	PRODUCTIONKIT_OT_SaveProjectVersion,
	Production_Kit_Update_Images, Production_Kit_Switch_Extension_Inputs, Production_Kit_Replace_Extensions, PRODUCTIONKIT_PT_update_images_ui,
	PRODUCTIONKIT_OT_set_viewport_shading)

keymaps = []



def register():
	# Register classes
	for cls in classes:
		bpy.utils.register_class(cls)
	
	# Add extension settings reference
	bpy.types.Scene.production_kit_settings = bpy.props.PointerProperty(type=ProductionKitSettings)
	
	
	########## Project Version ##########
	# Add project version to file menu
	bpy.types.TOPBAR_MT_file.append(TOPBAR_MT_file_save_version)
	
	
	########## Update Images ##########
	# Add image refresh button to the image menu
	bpy.types.IMAGE_MT_image.append(production_kit_update_images_menu_item)
	
	
	########## Colour Palette ##########
	# Add local scene settings
	bpy.types.Scene.palette_local = bpy.props.CollectionProperty(type=ColorPaletteProperty)
	
	
	########## Viewport Shading ##########
	bpy.types.VIEW3D_MT_view.append(production_kit_viewport_shading_menu_items)
	
	
	# Add keymaps for project versioning and viewport shading
	wm = bpy.context.window_manager
	kc = wm.keyconfigs.addon
	if kc:
		
		########## Project Version ##########
		
		# Linux/Windows Increment/Increment Minor
		km = wm.keyconfigs.addon.keymaps.new(name='Window')
		kmi = km.keymap_items.new(PRODUCTIONKIT_OT_SaveProjectVersion.bl_idname, 'S', 'PRESS', ctrl=True, alt=True, shift=True)
		kmi.properties.increment_major = False
		keymaps.append((km, kmi))
		
		## MacOS Increment/Increment Minor
		km = wm.keyconfigs.addon.keymaps.new(name='Window')
		kmi = km.keymap_items.new(PRODUCTIONKIT_OT_SaveProjectVersion.bl_idname, 'S', 'PRESS', oskey=True, alt=True, shift=True)
		kmi.properties.increment_major = False
		keymaps.append((km, kmi))
		
		## MacOS Increment Major
		km = wm.keyconfigs.addon.keymaps.new(name='Window')
		kmi = km.keymap_items.new(PRODUCTIONKIT_OT_SaveProjectVersion.bl_idname, 'S', 'PRESS', oskey=True, ctrl=True, alt=True, shift=True)
		kmi.properties.increment_major = True
		keymaps.append((km, kmi))
		
		########## Viewport Shading ##########
		
		km = wm.keyconfigs.addon.keymaps.new(name='3D View', space_type='VIEW_3D')
		kmi = km.keymap_items.new(PRODUCTIONKIT_OT_set_viewport_shading.bl_idname, 'NUMPAD_1', 'PRESS')
#		kmi = km.keymap_items.new(PRODUCTIONKIT_OT_set_viewport_shading.bl_idname, 'F1', 'PRESS', alt=True)
		kmi.properties.rendertype = 'WIREFRAME'
		keymaps.append((km, kmi))
		
		km = wm.keyconfigs.addon.keymaps.new(name='3D View', space_type='VIEW_3D')
		kmi = km.keymap_items.new(PRODUCTIONKIT_OT_set_viewport_shading.bl_idname, 'NUMPAD_2', 'PRESS')
#		kmi = km.keymap_items.new(PRODUCTIONKIT_OT_set_viewport_shading.bl_idname, 'F2', 'PRESS', alt=True)
		kmi.properties.rendertype = 'SOLID'
		keymaps.append((km, kmi))
		
		km = wm.keyconfigs.addon.keymaps.new(name='3D View', space_type='VIEW_3D')
		kmi = km.keymap_items.new(PRODUCTIONKIT_OT_set_viewport_shading.bl_idname, 'NUMPAD_3', 'PRESS')
#		kmi = km.keymap_items.new(PRODUCTIONKIT_OT_set_viewport_shading.bl_idname, 'F3', 'PRESS', alt=True)
		kmi.properties.rendertype = 'MATERIAL'
		keymaps.append((km, kmi))
		
		km = wm.keyconfigs.addon.keymaps.new(name='3D View', space_type='VIEW_3D')
		kmi = km.keymap_items.new(PRODUCTIONKIT_OT_set_viewport_shading.bl_idname, 'NUMPAD_0', 'PRESS')
#		kmi = km.keymap_items.new(PRODUCTIONKIT_OT_set_viewport_shading.bl_idname, 'F4', 'PRESS', alt=True)
		kmi.properties.rendertype = 'RENDERED'
		keymaps.append((km, kmi))



def unregister():
	# Remove keymaps
	for km, kmi in keymaps:
		km.keymap_items.remove(kmi)
	keymaps.clear()
	
	
	########## Project Version ##########
	bpy.types.TOPBAR_MT_file.remove(TOPBAR_MT_file_save_version)
	
	
	########## Update Images ##########
	bpy.types.IMAGE_MT_image.remove(production_kit_update_images_menu_item)
	
	
	########## Colour Palette ##########
	# Remove local scene settings
	del bpy.types.Scene.palette_local
	
	
	########## Viewport Shading ##########
	bpy.types.VIEW3D_MT_view.remove(production_kit_viewport_shading_menu_items)
	
	
	# Remove extension settings reference
	del bpy.types.Scene.production_kit_settings
	
	# Deregister classes
	for cls in reversed(classes):
		bpy.utils.unregister_class(cls)



if __package__ == "__main__":
	register()
